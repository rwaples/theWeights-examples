// TODO reschedule the end of the simulation based on G

initialize() {
	// simulation parameters
	defineConstant("L", 100); // number of recombining loci
	defineConstant("M", 400); // cohort size
	defineConstant("G", 1000); // length of simulation in generations
	defineConstant("G1", 100); // number of burn-in generations
	defineConstant("SEED", getSeed());

	// Load in life table
	lifetable = readCSV(path, sep = "\t");
	catn(lifetable);
	assert (lifetable.colNames == c("Age", "FemaleSx", "Femalebx", "Femalephi", "MaleSx", "Malebx", "Malephi"));
	Age = asInteger(lifetable.getValue('Age'));
	assert (Age[0]==1);
	FemaleSx = asFloat(lifetable.getValue('FemaleSx'));
	Femalebx = asFloat(lifetable.getValue('Femalebx'));
	Femalephi = asFloat(lifetable.getValue('Femalephi'));
	MaleSx = asFloat(lifetable.getValue('MaleSx'));
	Malebx = asFloat(lifetable.getValue('Malebx'));
	Malephi = asFloat(lifetable.getValue('Malephi'));
	Femalebx = rescale_fecundity(Femalebx, FemaleSx);
	Malebx = rescale_fecundity(Malebx, MaleSx);
	defineConstant("AGES", Age);
	defineConstant("F_SX", c(1.0, FemaleSx)); // survival rates (female)
	defineConstant("F_BX", Femalebx); // relative fecundity (female)
	defineConstant("F_PX", Femalephi); // var/mean of fecundity (female)
	defineConstant("M_SX", c(1.0, MaleSx)); // survival rates (male)
	defineConstant("M_BX", Malebx); // relative fecundity (male)
	defineConstant("M_PX", Malephi); // var/mean of fecundity (male)


	// demographics
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	initializeSex("A");


	// genetics
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(0.5);
	initializeMutationRate(0);

	HEADER = "Year\tYearlingID\tMomID\tDadID\tMomW\tDadW\tMomAge\tDadAge";
	writeFile("./pedigree.tsv", HEADER, append=F);

	PARENTHEADER = "Year\tSex\tID\tW\tAge\tRO";
	writeFile("./allparents.tsv", PARENTHEADER, append=F);

	HETRECORD = "SEED\tM\tG\tL\tH_E\tH_O\tH_Oc";
	if (fileExists("./HETRECORD.tsv"))
		1+1; // pass
	else {
		writeFile("./HETRECORD.tsv", HETRECORD, append=F);
	}
}


function (float)rescale_fecundity(float raw_fecundity, float Sx){
	factor = sum(raw_fecundity * cumProduct(c(1.0, Sx[0:(length(Sx)-2)])));
	return raw_fecundity * 2.0 / factor;
}

1:20 reproduction() {
	for (j in seqLen(M)) {
		inds = p1.individuals;
		females = inds[inds.sex == "F"];
		males = inds[inds.sex == "M"];
		fparent = sample(females, 1)[0];
		mparent = sample(males, 1)[0];
		offspring = subpop.addCrossed(fparent, mparent);
	}
	self.active = 0;
}


20: reproduction() {
	inds = p1.individuals;
	females = inds[inds.sex == "F"];
	males = inds[inds.sex == "M"];
	female_weights = get_parental_weights(F_BX, F_PX, females.age);
	male_weights = get_parental_weights(M_BX, M_PX, males.age);

	// store weights with each ind for logging
	for (i in 0:(length(females)-1)) {
		females[i].setValue("w", female_weights[i]);
	};
	for (i in 0:(length(males)-1)) {
		males[i].setValue("w", male_weights[i]);
	};


	// select parents for each of M offspring using weights
	for (j in seqLen(M)) {
		fparent = sample(females, 1, weights=female_weights)[0];
		mparent = sample(males, 1, weights=male_weights)[0];
		//offspring = subpop.addCrossed(fparent, mparent, sex = sex_order[j]);
		offspring = subpop.addCrossed(fparent, mparent);
		offspring.setValue("w", 0.0);


		// logging
		log = paste(
			sim.generation,
			offspring.pedigreeID,
			fparent.pedigreeID,
			mparent.pedigreeID,
			fparent.getValue("w"),
			mparent.getValue("w"),
			fparent.age,
			mparent.age,
			sep="\t"
		);
		if (sim.generation > 100)
			writeFile("./pedigree.tsv", log, append=T);
	}
	self.active = 0;
}



function (float)get_parental_weights(float bx, float px, integer ages){
	CV2 = (px-1)/bx;
	lambda = 1/CV2;
	lambda[isInfinite(lambda)] = 1; // px=1 so, weights should all be equal
	assert(lambda >= 0, message="Phi values must be >=1 for THEWEIGHTS to be applied.");

	// get weights for each age
	weights = float(length(ages));
	for (i in 0:(length(bx) - 1)) {
		n = length(ages[ages == i]); // count inds of age i.

		if (n == 0) next; // no ids of this age

		if (bx[i] == 0) { // fecundity = 0, weights are zero
			iweights = float(n);
			weights[ages == i] = iweights;
			next;
		}

		if (px[i] == 1)	{ // ~WF reproduction within age.
			iweights = float(n);
			iweights = iweights + bx[i]; // all inds of age have w = bx[i]
			weights[ages == i] = iweights;
			next;
		}

		else {
			iweights = rejection_sample_weights(n=n, lambda=lambda[i], tol=0.01);
			iweights = iweights * bx[i]; // scale weights so mean is bx[i]
			weights[ages == i] = iweights;
			};
	}
	return weights;
}


function (float)rejection_sample_weights(integer n, float lambda, float tol) {
	if (n == 1) return lambda; // only one ind

	target = 1/lambda;
	attempts = 0;
	diff = 1.0;
	while (abs(diff) > tol) {
		w = rpois(n, lambda);
		if (sum(w) == 0) next; // don't allow all weights to be zero
		v = var(w)*(n-1)/n;  // use population variance
		cv2 = v/mean(w)^2;
		diff = (cv2-target)/target;
		attempts = attempts + 1;
		if (attempts % 500 == 0) tol = tol * 2; // expand tolerance
	}

	// rescale so that the average rate within this age is 1
	w = w / mean(w); // average rate is now 1

	return w;
}


function (void)print_ages(integer x){
	for (AGE in 0:max(AGES)) {
		n_of_age = sum(p1.individuals.age==(AGE));
		catn("Age " + AGE + ": " + n_of_age);
	};

}

// simulation
1 early() {
	sim.addSubpop("p1", M);
	sim.rescheduleScriptBlock(s1, G+G1, G+G1);
	sim.rescheduleScriptBlock(s2, G+G1, G+G1);
	sim.rescheduleScriptBlock(s3, G1, G+G1);
	sim.rescheduleScriptBlock(s4, G+G1, G+G1);
}


100 early() {
	p1.individuals.genome1.addNewDrawnMutation(m1, 0:(L-1));
}


early() {
	// random number of survivors each year
	// sex-specific survival rates
	inds = p1.individuals;
	ages = inds.age;
	f_idx = inds.sex == "F";
	m_idx = inds.sex == "M";
	survival = float(length(inds));
	survival[f_idx] = F_SX[ages[f_idx]];
	survival[m_idx] = M_SX[ages[m_idx]];
	inds.fitnessScaling = survival;
}


9999 early() {
	// log all inds
	for (ind in p1.individuals) {
		log = paste(
			sim.generation,
			ind.sex,
			ind.pedigreeID,
			ind.getValue("w"),
			ind.age,
			ind.reproductiveOutput, // total offsping as of now, not just this gen
			sep="\t"
		);
		if (sim.generation > 100)
			writeFile("./allparents.tsv", log, append=T);
}


}

50 early() {
	// count of inds after reproduction, before mortality
	catn("_____ gen: " + sim.generation + " _(early)_");
	print_ages(1);
	catn("Total: " + length(p1.individuals));
}


50 late() {
	// // count of inds after mortality
	catn("_____ gen: " + sim.generation + " _(late)_");
	print_ages(1);
	catn("Total: " + length(p1.individuals));
	catn("");
	}


s3 99999 early() {
	if (sim.generation % 100 != 0) return;
	// Expected heterozygosity
	Ehet = calcHeterozygosity(p1.genomes);
	catn("gen: " + sim.generation + " E(het): " + Ehet);

	// Observed heterozygosity
	inds = p1.individuals;
	Ohet = float(length(inds));
	for (i in 0:(length(inds)-1)) {
		Ohet[i] = calcPairHeterozygosity(inds[i].genome1, inds[i].genome2);
	};
	catn("gen: " + sim.generation + " O(het): " + mean(Ohet));

	// Observed heterozygosity within new cohort
	inds = p1.individuals;
	inds = inds[inds.age == 0];
	Ohet = float(length(inds));
	for (i in 0:(length(inds)-1)) {
		Ohet[i] = calcPairHeterozygosity(inds[i].genome1, inds[i].genome2);
	};
	catn("gen: " + sim.generation + " O(het) - cohort: " + mean(Ohet));

}

s4 99999 early() {
	// Expected heterozygosity
	Ehet = calcHeterozygosity(p1.genomes);

	// Observed heterozygosity
	inds = p1.individuals;
	Ohet = float(length(inds));
	for (i in 0:(length(inds)-1)) {
		Ohet[i] = calcPairHeterozygosity(inds[i].genome1, inds[i].genome2);
	};
	Ohet = mean(Ohet);

	// Observed heterozygosity within new cohort
	inds = p1.individuals;
	inds = inds[inds.age == 0];
	OhetC = float(length(inds));
	for (i in 0:(length(inds)-1)) {
		OhetC[i] = calcPairHeterozygosity(inds[i].genome1, inds[i].genome2);
	};
	OhetC = mean(OhetC);
	log = paste(SEED, asInteger(M), asInteger(G), asInteger(L), Ehet, Ohet, OhetC, sep ='\t');
	writeFile("./HETRECORD.tsv", log, append=T);
}


s1 99999 early() {
	catn("_____ gen: " + sim.generation + " _(early)_");
	print_ages(1);
	catn("Total: " + length(p1.individuals));
}


s2 99999 late() {
	catn("_____ gen: " + sim.generation + " _(late)_");
	print_ages(1);
	catn("Total: " + length(p1.individuals));
	sim.simulationFinished();
}
